/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20GatedClone,
  ERC20GatedCloneInterface,
} from "../ERC20GatedClone";

const _abi = [
  {
    inputs: [],
    name: "NotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPurchase",
    type: "error",
  },
  {
    inputs: [],
    name: "NotSuccessful",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongSlicer",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "productsModuleAddress_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "slicerId_",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "erc20_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "gateAmount_",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "isPurchaseAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "isAllowed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slicerId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "productId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "slicerCustomData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "buyerCustomData",
        type: "bytes",
      },
    ],
    name: "onProductPurchase",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610533806100206000396000f3fe6080604052600436106100345760003560e01c806395db936814610039578063a23fffb91461006d578063e24df75414610082575b600080fd5b34801561004557600080fd5b506100596100543660046103bc565b6100a2565b604051901515815260200160405180910390f35b61008061007b3660046103bc565b610125565b005b34801561008e57600080fd5b5061008061009d36600461044e565b610163565b6002546040516370a0823160e01b81526001600160a01b03868116600483015260009283929116906370a0823190602401602060405180830381865afa1580156100f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101149190610496565b600354111598975050505050505050565b8561012f81610221565b61013d8787878787876100a2565b61015a57604051631eb49d6d60e11b815260040160405180910390fd5b50505050505050565b600061016f6001610271565b90508015610187576004805461ff0019166101001790555b600080546001600160a01b038088166001600160a01b03199283161790925560018690556040805180820190915291851680835260209092018490526002805490911690911790556003829055801561021a576004805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b806001541461024357604051632eafdb6960e01b815260040160405180910390fd5b6000546001600160a01b0316331461026e576040516347322d0360e01b815260040160405180910390fd5b50565b600454600090610100900460ff16156102c3578160ff1660011480156102965750303b155b6102bb5760405162461bcd60e51b81526004016102b2906104af565b60405180910390fd5b506000919050565b60045460ff8084169116106102ea5760405162461bcd60e51b81526004016102b2906104af565b506004805460ff191660ff92909216919091179055600190565b6001600160a01b038116811461026e57600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f83011261034057600080fd5b813567ffffffffffffffff8082111561035b5761035b610319565b604051601f8301601f19908116603f0116810190828211818310171561038357610383610319565b8160405283815286602085880101111561039c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156103d557600080fd5b863595506020870135945060408701356103ee81610304565b935060608701359250608087013567ffffffffffffffff8082111561041257600080fd5b61041e8a838b0161032f565b935060a089013591508082111561043457600080fd5b5061044189828a0161032f565b9150509295509295509295565b6000806000806080858703121561046457600080fd5b843561046f81610304565b935060208501359250604085013561048681610304565b9396929550929360600135925050565b6000602082840312156104a857600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea26469706673582212208ab7d0af45eeb5ba9a8efc295dfeea724adf1b2feeb753fe6ee1dc97cae77ce464736f6c634300080d0033";

type ERC20GatedCloneConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20GatedCloneConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20GatedClone__factory extends ContractFactory {
  constructor(...args: ERC20GatedCloneConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20GatedClone";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20GatedClone> {
    return super.deploy(overrides || {}) as Promise<ERC20GatedClone>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20GatedClone {
    return super.attach(address) as ERC20GatedClone;
  }
  connect(signer: Signer): ERC20GatedClone__factory {
    return super.connect(signer) as ERC20GatedClone__factory;
  }
  static readonly contractName: "ERC20GatedClone";
  public readonly contractName: "ERC20GatedClone";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20GatedCloneInterface {
    return new utils.Interface(_abi) as ERC20GatedCloneInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20GatedClone {
    return new Contract(address, _abi, signerOrProvider) as ERC20GatedClone;
  }
}
